// Code generated by go-swagger; DO NOT EDIT.

package operation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Cacerts distributions of c a certificates
*/
func (a *Client) Cacerts(params *CacertsParams) (*CacertsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCacertsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cacerts",
		Method:             "GET",
		PathPattern:        "/cacerts",
		ProducesMediaTypes: []string{"application/pkcs7-mime"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CacertsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CacertsOK), nil

}

/*
Simpleenroll enrollments of clients
*/
func (a *Client) Simpleenroll(params *SimpleenrollParams, authInfo runtime.ClientAuthInfoWriter) (*SimpleenrollOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSimpleenrollParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "simpleenroll",
		Method:             "POST",
		PathPattern:        "/simpleenroll",
		ProducesMediaTypes: []string{"application/pkcs7-mime"},
		ConsumesMediaTypes: []string{"application/pkcs10"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SimpleenrollReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SimpleenrollOK), nil

}

/*
Simplereenroll enrollments of clients requires mutual tls
*/
func (a *Client) Simplereenroll(params *SimplereenrollParams, authInfo runtime.ClientAuthInfoWriter) (*SimplereenrollOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSimplereenrollParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "simplereenroll",
		Method:             "POST",
		PathPattern:        "/simplereenroll",
		ProducesMediaTypes: []string{"application/pkcs7-mime"},
		ConsumesMediaTypes: []string{"application/pkcs10"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SimplereenrollReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SimplereenrollOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
